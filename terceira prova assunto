1) Crie uma função que receba uma string como argumento e retorne a 
   mesma string separada por virgulas
   Faça uma chamada à função, passando como parâmetro uma string.
def virgulas (w):
    wn=""
    for k in range(len(w)):
        wn=wn+w [k]+","
        print(wn)
    wn = wn[0:len(wn) - 1]
    return wn
# inicio do programa
s="rosa"
s1=virgulas(s)
print(s1)


#wn=" "
#w="rosa"
#
#for k in range(len(w)):
    #wn=wn+w[k]+","
    
#wn=wn[0:len(wn)-1]
#print(wn)


agora para demover as virgulas


w="r,o,s,a"
wn=" "

for k in range (len(w)):
    if w[k]!=",":
        wn=wn+w[k]
    print (wn)
    
2) Crie uma funcao que tire as virgulas da string conforme feito no 
   exercicio anterior.
w="r,o,s,a"
wn=" "

for k in range (len(w)):
    if w[k]!=",":
        wn=wn+w[k]
    print (wn)
3) Crie uma função que receba como parâmetro uma lista de 4 elementos, 
   adicione 2 elementos a lista e imprima a lista
def adiciona(s,s1,s2):
    s.append(s1)
    s.append(s2)
    return s
    
s=[2,3,4,5]
s=adiciona(s,11,15)
print(s)

4) Crie uma função("rolar") que receba uma string como argumento e 
   faca o rolamento das letras com n posicoes. 
   a ="amarelo" a funcao rolar(a,2) resultaria="loamare" e a funcao 
   rolar(a,4) resultaria="reloama" 

def rolar(w,n):
    wn=w[len(w)-n:] + w[0:len(w)-n]
    return wn
    
#inicio do programa
s="amarelo"
s1=rolar(s,2)
print(s1)

for k in range(5):
    s1=rolar(s,k)
    print (s1)


##############################################################################
# Exercício 1 - Crie uma função que imprima a sequência de números pares entre 1 e 20 
(a função não recebe parâmetro) e depois faça uma chamada à função para listar os números
 
# Exercício 2 - Crie uma função que receba uma string como argumento e retorne a mesma string separad por virgulas
# Faça uma chamada à função, passando como parâmetro uma string
 
# Exercício 3 - Crie uma função que receba como parâmetro uma lista de 4 elementos, adicione 2 elementos a lista e 
# imprima a lista
 
# Exercício 4 - Crie uma função que receba um argumento formal e uma possível lista de elementos. 
Faça duas chamadas à função, com apenas 1 elemento e na segunda chamada com 4 elementos
 
# Exercício 5 - Crie uma função anônima e atribua seu retorno a uma variável chamada soma. A expressão vai receber 2 
# números como parâmetro e retornar a soma deles
In [ ]:
# Exercício 6 - Execute o código abaixo e certifique-se que compreende a diferença entre variável global e local
total = 0
def soma( arg1, arg2 ):
    total = arg1 + arg2; 
    print ("Dentro da função o total é: ", total)
    return total;


soma( 10, 20 );
print ("Fora da função o total é: ", total)
In [ ]:
# Exercício 7 - Abaixo você encontra uma lista com temperaturas em graus Celsius
# Crie uma função anônima que converta cada temperatura para Fahrenheit
# Dica: para conseguir realizar este exercício, você deve criar sua função lambda, dentro de uma função 
# (que será estudada no próximo capítulo). Isso permite aplicar sua função a cada elemento da lista
# Como descobrir a fórmula matemática que converte de Celsius para Fahrenheit? Pesquise!!!
Celsius = [39.2, 36.5, 37.3, 37.8]
Fahrenheit = map(coloque_aqui_sua_função_lambda)
print (list(Fahrenheit))

# Exercício 8
# Crie um dicionário e liste todos os métodos e atributos do dicionário
In [ ]:
# Exercício 9
# Abaixo você encontra a importação do Pandas, um dos principais pacotes Python para análise de dados.
# Analise atentamente todos os métodos disponíveis. Um deles você vai usar no próximo exercício.
import pandas as pd
dir(pd)
In [ ]:
# ***** Desafio ***** (pesquise na documentação Python)

# Exercício 10 - Crie uma função que receba o arquivo abaixo como argumento e retorne um resumo estatístico descritivo 
# do arquivo. Dica, use Pandas e um de seus métodos, describe()
# Arquivo: "binary.csv"
import pandas as pd
file_name = "binary.csv"
